// Code generated by MockGen. DO NOT EDIT.
// Source: src/service/messenger.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "TemplateApi/src/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMessenger is a mock of Messenger interface
type MockMessenger struct {
	ctrl     *gomock.Controller
	recorder *MockMessengerMockRecorder
}

// MockMessengerMockRecorder is the mock recorder for MockMessenger
type MockMessengerMockRecorder struct {
	mock *MockMessenger
}

// NewMockMessenger creates a new mock instance
func NewMockMessenger(ctrl *gomock.Controller) *MockMessenger {
	mock := &MockMessenger{ctrl: ctrl}
	mock.recorder = &MockMessengerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMessenger) EXPECT() *MockMessengerMockRecorder {
	return m.recorder
}

// CreateSimpleMessage mocks base method
func (m *MockMessenger) CreateSimpleMessage(message models.SimpleMessage) (*models.SimpleMessageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSimpleMessage", message)
	ret0, _ := ret[0].(*models.SimpleMessageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSimpleMessage indicates an expected call of CreateSimpleMessage
func (mr *MockMessengerMockRecorder) CreateSimpleMessage(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSimpleMessage", reflect.TypeOf((*MockMessenger)(nil).CreateSimpleMessage), message)
}
